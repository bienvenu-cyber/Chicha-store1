'use strict';

const CastError = import('../error/cast');

/**
 * Given a value, cast it to a boolean, or throw a `CastError` if the value
 * cannot be casted. `null` and `undefined` are considered valid.
 *
 * @param {Any} value
 * @param {String} [path] optional the path to set on the CastError
 * @return {Boolean|null|undefined}
 * @throws {CastError} if `value` is not one of the allowed values
 * @api private
 */

export default = function castBoolean(value, path) {
  if (export default.convertToTrue.has(value)) {
    return true;
  }
  if (export default.convertToFalse.has(value)) {
    return false;
  }

  if (value == null) {
    return value;
  }

  throw new CastError('boolean', value, path);
};

export default.convertToTrue = new Set([true, 'true', 1, '1', 'yes']);
export default.convertToFalse = new Set([false, 'false', 0, '0', 'no']);
